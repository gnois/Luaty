var bit = require('bit')
var ffi = require('ffi')
var int64 = ffi.typeof('int64_t')
var uint64 = ffi.typeof('uint64_t')

var ASCII_0, ASCII_9 = 48, 57
var ASCII_a, ASCII_f, ASCII_z = 97, 102, 122
var ASCII_A, ASCII_Z = 65, 90
var ASCII_TAB, ASCII_CR, ASCII_SPACE = 9, 13, 32


var isletter = \c ->
	var b = string.byte(c)
	if b >= ASCII_a and b <= ASCII_z
		return true
	else if b >= ASCII_A and b <= ASCII_Z
		return true
	else
		return (c == '_')


var isalnum = \c ->
	var b = string.byte(c)
	if b >= ASCII_0 and b <= ASCII_9
		return true
	else if b >= ASCII_a and b <= ASCII_z
		return true
	else if b >= ASCII_A and b <= ASCII_Z
		return true
	else
		return (c == '_')


var isdigit = \c ->
	var b = string.byte(c)
	return b >= ASCII_0 and b <= ASCII_9


var isspace = \c ->
	var b = string.byte(c)
	return b >= ASCII_TAB and b <= ASCII_CR or b == ASCII_SPACE


var build_int64 = \str ->
	var u = str[#str - 2]
	var x = (u == 117 and uint64(0) or int64(0))
	var i = 1
	while str[i] >= ASCII_0 and str[i] <= ASCII_9
		x = 10 * x + (str[i] - ASCII_0)
		i = i + 1
	return x


-- Only lower case letters are accepted.
var byte_to_hexdigit = \b ->
	if b >= ASCII_0 and b <= ASCII_9
		return b - ASCII_0
	else if b >= ASCII_a and b <= ASCII_f
		return 10 + (b - ASCII_a)
	else
		return -1


var build_hex64 = \str ->
	var u = str[#str - 2]
	var x = (u == 117 and uint64(0) or int64(0))
	var i = 3
	while str[i]
		var n = byte_to_hexdigit(str[i])
		if n < 0 break 
		x = 16 * x + n
		i = i + 1
	return x


var strnumdump = \str ->
	var t = {}
	for i = 1, #str
		var c = string.sub(str, i, i)
		if isalnum(c)
			t[i] = string.byte(c)
		else
			return nil
	return t


var hex_char = \c ->
	if string.match(c, '^%x')
		var b = bit.band(string.byte(c), 15)
		if not isdigit(c) b = b + 9
		return b


return {
	is = {
		letter = isletter
		, alnum = isalnum
		, digit = isdigit
		, space = isspace
	}
	, build = {
		int64 = build_int64
		, hex64 = build_hex64
	}
	, strnumdump = strnumdump
	, hex = hex_char
}