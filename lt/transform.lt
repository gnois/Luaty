var ast = require('lua.ast')
var Tag = require('lua.tag')
var TStmt = Tag.Stmt
var TExpr = Tag.Expr

var inc = 0
var id = ast.Expr.id

var setmt = \tbl, mt, node ->
	return ast.Expr.call(id("setmetatable", node), {tbl, mt}, node)

var str = \txt, node ->
	return ast.Expr.string(txt, false, node)

--`
var call_stmt = \lambda, args, node ->
	return ast.Stmt.expression(ast.Expr.call(lambda, args, node), node)
--`


return \stmts ->

	var Stmt = {}
	var Expr = {}
	
	var visit_stmts = \nodes ->
		var list = {}
		for i, node in ipairs(nodes)
			var rule = Stmt[node.tag]
			list[i] = rule and rule(node) or node
		return list
	
	var visit_expr = \node ->
		var rule = Expr[node.tag]
		return rule and rule(node) or node
			
	var visit_exprs = \nodes ->
		var list = {}
		for i, node in ipairs(nodes)
			list[i] = visit_expr(node)
		return list


	-- disjoint union constructor
	var construct = \node ->
		var uniq, u = {'.'}, 1
		var _ = id("__", node)
		var vks = {}
		-- ctor table
		for i, v in ipairs(node.variants)
			u = u + 1
			uniq[u] = v.ctor.name
			var key = str(v.ctor.name, v.ctor)
			var params = {
				{ str(v.ctor.name, v.ctor), str('$', v.ctor) }
			}
			for n, p in ipairs(v.params)
				u = u + 1
				uniq[u] = p.name or '.'
				params[n+1] = { p }
			var tbl = ast.Expr.table(params, v.ctor)
			var val = ast.Expr.function(v.params, {}, {}, { ast.Stmt.return({setmt(tbl, _, node)}, v.ctor) }, node)
			vks[i] = { val, key }
		
		var tbl = ast.Expr.table(vks, node)

		var unique_str = str(table.concat(uniq), node)
		-- __call metamethod
		var idvar = id("_var", node)
		var uid = id("_id", node)
		var test = ast.Expr.binary("and"
			, ast.Expr.binary("=="
				, str("table", node)
				, ast.Expr.call(id("type", node), {idvar}, node)
				, node
			)
			, ast.Expr.binary("=="
				, uid
				, ast.Expr.call(id("getmetatable", node), {idvar}, node)
				, node
			)
			, node
		)
		var testfn = ast.Expr.function({id("_t", node), idvar}, {}, {}, {
			ast.Stmt.if({test}, {
				{ ast.Stmt.return({idvar}, node) }
			}, nil, node)
		}, node)
		var callable = ast.Expr.table({
			{ testfn, str("__call", node) }
		}, node)

		var mt = ast.Expr.table({
			{ uid, str("__metatable", node) }
		}, node)
		var lambda = ast.Expr.function({uid}, {}, {}, {
			ast.Stmt.local({_}, {}, {mt}, node)
			, ast.Stmt.return({setmt(tbl, callable, node)}, node)
		}, node)

		return ast.Expr.call(lambda, {unique_str}, node)

	-- disjoint union destructor
	var destruct = \node ->

		var ret_call = \params, body, args, loc ->
			return ast.Stmt.return({ ast.Expr.call(
				ast.Expr.function(params, {}, {}, body, loc)
				, args
				, loc
			)}, loc)

		-- must use if-elseif-else, in case user never return in one of the branch 
		var tests, blocks, n = {}, {}, 0
		var els
		inc = inc + 1
		var _x = id("_" .. inc, node)

		for _, v in ipairs(node.variants)
			var all = ast.Expr.vararg(v.ctor)
			var handler = visit_stmts(v.body)
			if #v.params > 0
				handler = { ret_call(v.params, handler, {all}, v.ctor) }

			if v.ctor.name == '*'
				els = handler
			else
				n = n + 1
				blocks[n] = handler
				tests[n] = ast.Expr.binary("=="
					, str(v.ctor.name, v.ctor)
					, ast.Expr.index(_x, str('$', v.ctor), v.ctor)
					, v.ctor
				)

		var conds
		if n > 0
			conds = { ast.Stmt.if(tests, blocks, els, node) }
		else if els
			conds = els

		var lambda = ast.Expr.function({_x}, {}, {}, {
			ret_call({ast.Expr.vararg(node)},  conds, {ast.Expr.call(id("unpack", node), {_x}, node)}, node) 
		}, node)

		var test = visit_expr(node.test)
		var arg = visit_expr(node.arg)
		return ast.Expr.call(lambda
			, { ast.Expr.binary("or", ast.Expr.call(test, {arg}, node), ast.Expr.table({}, node), node) }
			, node
		)


	--------- Expressions --------------------
	Expr[TExpr.Id] = \node ->
		if node.name == '@'
			node.name = 'self'
		return node
		
	Expr[TExpr.Function] = \node ->
		node.params = visit_exprs(node.params)
		node.body = visit_stmts(node.body)
		return node

	Expr[TExpr.Table] = \node ->
		var valkeys = {}
		for i, kv in ipairs(node.valkeys)
			valkeys[i] = {}
			valkeys[i][1] = visit_expr(kv[1])
			if kv[2]
				valkeys[i][2] = visit_expr(kv[2])
		node.valkeys = valkeys
		return node

	Expr[TExpr.Index] = \node ->
		node.obj = visit_expr(node.obj)
		node.idx = visit_expr(node.idx)
		return node

	Expr[TExpr.Property] = \node ->
		node.obj = visit_expr(node.obj)
		return node

	Expr[TExpr.Call] = \node ->
		node.func = visit_expr(node.func)
		var arg1 = node.args[1]
		if arg1 and arg1.name == '@'
			var func = node.func
			if not func.bracketed
				if func.tag == TExpr.Property
					table.remove(node.args, 1)
					return ast.Expr.invoke(func.obj, func.prop, node.args, node)

				else if func.tag == TExpr.Index
					-- simulate a wrapped self method call
					var obj = id('_self_', node)  -- lets hope we dont shadow parent scope variable
					node.args[1] = obj
					var body = {
						ast.Stmt.local({obj}, {}, {func.obj}, node)
						, ast.Stmt.return({
							ast.Expr.call(ast.Expr.index(obj, func.idx, node), node.args, node)
						}, node)
					}
					var lambda = ast.Expr.function({}, {}, {}, body, node)
					return ast.Expr.call(lambda, {}, node)

		node.args = visit_exprs(node.args)
		return node

	Expr[TExpr.Union] = \node ->
		if node.test and node.arg
			return destruct(node)
		return construct(node)

	Expr[TExpr.Unary] = \node ->
		node.right = visit_expr(node.right)
		return node

	Expr[TExpr.Binary] = \node ->
		node.left = visit_expr(node.left)
		node.right = visit_expr(node.right)
		return node

	--------- Statements --------------------
	Stmt[TStmt.Expr] = \node ->
		node.expr = visit_expr(node.expr)
		return node

	Stmt[TStmt.Local] = \node ->
		node.vars = visit_exprs(node.vars)
		node.exprs = visit_exprs(node.exprs)
		return node

	Stmt[TStmt.Assign] = \node ->
		node.lefts = visit_exprs(node.lefts)
		node.rights = visit_exprs(node.rights)
		return node

	Stmt[TStmt.Do] = \node ->
		node.body = visit_stmts(node.body)
		return node

	Stmt[TStmt.If] = \node ->
		for i = 1, #node.tests
			node.tests[i] = visit_expr(node.tests[i])
			node.thenss[i] = visit_stmts(node.thenss[i])
		if node.elses
			node.elses = visit_stmts(node.elses)
		return node

	Stmt[TStmt.Forin] = \node ->
		node.exprs = visit_exprs(node.exprs)
		node.body = visit_stmts(node.body)
		return node

	Stmt[TStmt.Fornum] = \node ->
		node.first = visit_expr(node.first)
		node.last = visit_expr(node.last)
		if node.step
			node.step = visit_expr(node.step)
		node.body = visit_stmts(node.body)
		return node
		
	Stmt[TStmt.While] = \node ->
		node.test = visit_expr(node.test)
		node.body = visit_stmts(node.body)
		return node

	Stmt[TStmt.Repeat] = \node ->
		node.body = visit_stmts(node.body)
		node.test = visit_expr(node.test)
		return node

	Stmt[TStmt.Return] = \node ->
		node.exprs = visit_exprs(node.exprs)
		return node

	return visit_stmts(stmts)
