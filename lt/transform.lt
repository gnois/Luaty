var ast = require('lua.ast')
var Tag = require('lua.tag')
var TStmt = Tag.Stmt
var TExpr = Tag.Expr

return \stmts ->

	var Stmt = {}
	var Expr = {}
	
	var visit_stmts = \nodes ->
		var list = {}
		for i, node in ipairs(nodes)
			var rule = Stmt[node.tag]
			list[i] = rule and rule(node) or node
		return list
	
	var visit_expr = \node ->
		var rule = Expr[node.tag]
		return rule and rule(node) or node
			
	var visit_exprs = \nodes ->
		var list = {}
		for i, node in ipairs(nodes)
			list[i] = visit_expr(node)
		return list

	--------- Expressions --------------------
	Expr[TExpr.Id] = \node ->
		if node.name == '@'
			node.name = 'self'
		return node
		
	Expr[TExpr.Function] = \node ->
		node.params = visit_exprs(node.params)
		node.body = visit_stmts(node.body)
		return node

	Expr[TExpr.Table] = \node ->
		var valkeys = {}
		for i, kv in ipairs(node.valkeys)
			valkeys[i] = {}
			valkeys[i][1] = visit_expr(kv[1])
			if kv[2]
				valkeys[i][2] = visit_expr(kv[2])
		node.valkeys = valkeys
		return node

	Expr[TExpr.Index] = \node ->
		node.obj = visit_expr(node.obj)
		node.idx = visit_expr(node.idx)
		return node

	Expr[TExpr.Property] = \node ->
		node.obj = visit_expr(node.obj)
		return node

	Expr[TExpr.Call] = \node ->
		node.func = visit_expr(node.func)
		var arg1 = node.args[1]
		if arg1 and arg1.name == '@'
			var func = node.func
			if not func.bracketed
				if func.tag == TExpr.Property
					table.remove(node.args, 1)
					return ast.Expr.invoke(func.obj, func.prop, node.args, node)

				else if func.tag == TExpr.Index
					-- simulate a wrapped self method call
					var obj = ast.Expr.id('_self_', node)  -- lets hope we dont shadow parent scope variable
					node.args[1] = obj
					var body = {
						ast.Stmt.local({obj}, {}, {func.obj}, node)
						, ast.Stmt.return({
							ast.Expr.call(ast.Expr.index(obj, func.idx, node), node.args, node)
						}, node)
					}
					var lambda = ast.Expr.function({}, {}, {}, body, node)
					return ast.Expr.call(lambda, {}, node)

		node.args = visit_exprs(node.args)
		return node

	Expr[TExpr.Unary] = \node ->
		node.left = visit_expr(node.left)
		return node

	Expr[TExpr.Binary] = \node ->
		node.left = visit_expr(node.left)
		node.right = visit_expr(node.right)
		return node

	--------- Statements --------------------
	Stmt[TStmt.Expr] = \node ->
		node.expr = visit_expr(node.expr)
		return node

	Stmt[TStmt.Local] = \node ->
		node.vars = visit_exprs(node.vars)
		node.exprs = visit_exprs(node.exprs)
		return node

	Stmt[TStmt.Data] = \node ->
		var vks = {}
		for i, v in ipairs(node.variants)
			var key = ast.Expr.string(v.ctor.name, false, v.ctor)
			var params = {
				{ ast.Expr.string(node.name.name .. ":" .. v.ctor.name, false, v.ctor), ast.Expr.string("^", false, v.ctor) }
			}
			for n, p in ipairs(v.params)
				params[n+1] = { p }
			var tbl = ast.Expr.table(params, v.ctor)
			var val = ast.Expr.function(v.params, {}, {}, { ast.Stmt.return({tbl}, v.ctor) }, node)
			vks[i] = { val, key }
		
		var tbl = ast.Expr.table(vks, node)
		var idvar = ast.Expr.id("var", node)
		var body = {
			ast.Expr.binary('and'
				, ast.Expr.binary('=='
					, ast.Expr.call(ast.Expr.id("type", node), {idvar}, node)
					, ast.Expr.string("table", false, node)
					, node
				)
				, ast.Expr.call(ast.Expr.property(ast.Expr.id("string", node), "find", node), {
					ast.Expr.index(idvar, ast.Expr.string("^", false, node), node)
					, ast.Expr.string(node.name.name .. ":", false, node)
				}, node)
				, node
			)
		}
		var test = ast.Expr.function({idvar}, {}, {}, { ast.Stmt.return(body, node) }, node)
		var metatb = ast.Expr.table({
			{ test, ast.Expr.string("__call", false, node) }
		}, node)
		var setmetatb = ast.Expr.call(ast.Expr.id("setmetatable", node), {tbl, metatb}, node)
		return ast.Stmt.local({node.name}, {}, {setmetatb}, node)

	Stmt[TStmt.Assign] = \node ->
		node.lefts = visit_exprs(node.lefts)
		node.rights = visit_exprs(node.rights)
		return node

	Stmt[TStmt.Do] = \node ->
		node.body = visit_stmts(node.body)
		return node

	Stmt[TStmt.If] = \node ->
		for i = 1, #node.tests
			node.tests[i] = visit_expr(node.tests[i])
			node.thenss[i] = visit_stmts(node.thenss[i])
		if node.elses
			node.elses = visit_stmts(node.elses)
		return node

	Stmt[TStmt.Forin] = \node ->
		node.exprs = visit_exprs(node.exprs)
		node.body = visit_stmts(node.body)
		return node

	Stmt[TStmt.Fornum] = \node ->
		node.first = visit_expr(node.first)
		node.last = visit_expr(node.last)
		if node.step
			node.step = visit_expr(node.step)
		node.body = visit_stmts(node.body)
		return node
		
	Stmt[TStmt.While] = \node ->
		node.test = visit_expr(node.test)
		node.body = visit_stmts(node.body)
		return node

	Stmt[TStmt.Repeat] = \node ->
		node.body = visit_stmts(node.body)
		node.test = visit_expr(node.test)
		return node

	Stmt[TStmt.Return] = \node ->
		node.exprs = visit_exprs(node.exprs)
		return node

	return visit_stmts(stmts)
