var Tag = require('lt.tag')

-- check if ast are the same
var same
same = \a, b ->
	if a and b and a.tag == b.tag
		-- http://stackoverflow.com/questions/27674367/lua-check-if-a-table-can-be-looped-through-via-ipairs-ipairs-starting-at-0
		if #a ~= #b
			return false

		-- check array part
		var last = 1
		for i, v in ipairs(a)
			last = i
			if 'table' == type(v)
				if not same(v, b[i])
					return false
			else if b[i] ~= v
				return false

		-- check hashmap part
		for k, v in pairs(a)
			if 'number' ~= type(k) or k < 1 or k > last or math.floor(k) ~= k
				-- ignore line,col
				if k ~= 'line' and k ~= 'col'
					if 'table' == type(v)
						if not same(v, b[k])
							return false
					else if b[k] ~= v
						return false

		-- b may have more keys than a
		for k, v in pairs(b)
			if 'number' ~= type(k) or k < 1 or k > last or math.floor(k) ~= k
				-- ignore line,col
				if k ~= 'line' and k ~= 'col'
					if 'table' == type(v)
						if not same(v, a[k])
							return false
					else if a[k] ~= v
						return false

		return true
	return false


var clone
clone = \t ->
	if type(t) == "table"
		var copy = {}
		for i, v in ipairs(t)
			copy[i] = clone(v)
		for k, v in pairs(t)
			copy[clone(k)] = clone(v)
		--setmetatable(copy, clone(getmetatable(t)))
		return copy

	return t


var TType = Tag.Type

---------------- subtyping ---------------------
var subtype

var subtype_tuple = \a, s ->
	var i, n = 0, #a
	while i < n
		i = i + 1
		if s[i]
			if not subtype(a[i], s[i])
				return false
		else
			if not a[i].varargs
				return false
		
	if i < #s
		i = i + 1
		if not s[i].varargs
			return false
	return true


var subtype_func = \a, s ->
	var as, ss = a.ins, s.ins
	var i, n = 0, #as

	-- check if too few args
	-- params are contravariant
	while i < n
		i = i + 1
		if ss[i]
			if not subtype(ss[i], as[i])
				return false
		else
			if not as[i].varargs
				return false
			return true

	-- check if too many args
	n = #ss
	if i < n
		if i < 1 or not as[i].varargs
			return false

	-- return types are covariant
	as, ss = a.outs, s.outs
	i, n = 0, #as
	while i < n
		i = i + 1
		if not subtype(as[i], ss[i])
			return false
	-- ignore extra returns for now
	return true


var subtype_tbl = \a, s ->
	-- convert to lookup table first
	var keys = {}
	var arrty
	for __, tty in ipairs(s)
		if tty[2]
			keys[tty[2]] = tty[1]
		else
			assert(not arrty)
			arrty = tty[1]

	for _, ttx in ipairs(a)
		if ttx[2]
			var vs = keys[ttx[2]]
			if vs
				if not subtype(ttx[1], vs)
					return false
			else
				return false
		else
			if arrty and not subtype(ttx[1], arrty)
				return false
	return true


subtype = \a, s ->
	if a == s
		return true

	if a.tag == TType.Or
		for _, v in ipairs(a)
			if not subtype(v, s)
				return false
		return true
	
	if s.tag == TType.Or
		for _, v in ipairs(s)
			if subtype(a, v)
				return true
		return false

	if a.tag == s.tag
		if a.tag == TType.Nil
			return true

		if a.tag == TType.Val
			if a.type == s.type
				return true

		if a.tag == TType.Tuple
			return subtype_tuple(a, s)

		if a.tag == TType.Func
			return subtype_func(a, s)

		if a.tag == TType.Tbl
			return subtype_tbl(a, s)
	
	return false



-- return the tbl or union of tbl, ...
-- else nil
var get_tbl = \t ->
	var tbl = t
	if t.tag == TType.Or
		for _, v in ipairs(t)
			if v.tag == TType.Tbl
				tbl = v
				break
	if tbl.tag == TType.Tbl
		return tbl


-- prevent multiple level of Or/Tuple
var flatten = \ty, types ->
	-- flatten
	var list, l = {}, 0
	for _, t in ipairs(types)
		if t.tag == ty
			for __, tt in ipairs(t)
				l = l + 1
				list[l] = tt
		else
			l = l + 1
			list[l] = t
	-- remove subtypes
	-- this is WRONG for now
	-- PARAMS ARE CONTRAVARIANT, RETURN ARE COVARIANT
	if l > 1
		var out, o = {}, 0
		for _, t in ipairs(list)
			var skip = false
			for __, v in ipairs(out)
				if subtype(t, v)
					skip = true
					break
			if not skip
				o = o + 1
				out[o] = t
		return out
	return list


------------------ types ------------------------
--``
1,2,3, .. typevar
# number
$ string
! bool
. vararg
- optional/nillable. If used in func return [:-] means void
* any, but not pure nil
[:] type tuple to type tuple - function
{:} type to type - table
{} array
~1,2,3... typeof
--``

var create = \tag, node ->
	assert('table' == type(node))
	node.tag = tag
	return node

-- table needed, coz some function names are keywords
var Type = {
	any = ->
		return create(TType.Any, {})

	, nil = ->
		return create(TType.Nil, {})

	, num = ->
		return create(TType.Val, {type = "num"})

	, str = ->
		return create(TType.Val, {type = "str"})

	, bool = ->
		return create(TType.Val, {type = "bool"})

	-- array of types
	, tuple = \types ->
		var list = flatten(TType.Tuple, types)
		return create(TType.Tuple, list)

	-- ins and outs are tuples
	, func = \ins, outs ->
		return create(TType.Func, {ins = ins, outs = outs})

	-- Lua table key can be any type
	-- If it's string, we'll use back the string literal, else it is a Type object
	-- typetypes is array of { type: type } or { name: type }
	, tbl = \typetypes ->
		return create(TType.Tbl, typetypes)

	, or = \... ->
		var list = flatten(TType.Or, {...})
		return create(TType.Or, list)

	, and = \... ->
		return create(TType.And, {...})

	, name = \name ->
		return create(TType.Name, {name = name})

	, index = \obj, idx ->
		return create(TType.Index, {obj = obj, idx = idx})

	, typeof = \var ->
		return create(TType.Typeof, {var = var})

}

var varargs = \t ->
	assert(TType[t.tag])  -- must be type node
	t.varargs = true
	return t

----------------- type to string ------------------
var Str = {}
var tostr = \t ->
	assert(TType[t.tag])
	var rule = Str[t.tag]
	var s = rule(t)
	if t.varargs
		return s .. "*"
	return s

-- build switch table only once
Str[TType.New] = \t ->
	return "T" .. t.id

Str[TType.Any] = ->
	return "<any>"

Str[TType.Nil] = ->
	return "<nil>"

Str[TType.Val] = \t ->
	return '<' .. t.type .. '>'

Str[TType.Tuple] = \t ->
	var out = {}
	for i, v in ipairs(t)
		out[i] = tostr(v)
	return '(' .. table.concat(out, ', ') .. ')'

Str[TType.Func] = \t ->
	return table.concat({tostr(t.ins), '->', tostr(t.outs)})

Str[TType.Tbl] = \t ->
	var out, o = {}, 1
	var val
	for _, ty in ipairs(t)
		var vty = ty[1]
		var kty = ty[2]
		if kty
			if "string" == type(kty)
				out[o] = kty .. ': ' .. tostr(vty)
			else
				out[o] = tostr(kty) .. ': ' .. tostr(vty)
			o = o + 1
		else
			val = tostr(vty)

	if val
		out[o] = val
	return '{' .. table.concat(out, ', ') .. '}'


Str[TType.Or] = \t ->
	var list = {}
	for i, x in ipairs(t)
		list[i] = tostr(x)
	return table.concat(list, '|')



-- shortcut
var any_t = Type.any()
var nil_t = Type.nil()
var num_t = Type.num()
var str_t = Type.str()
var bool_t = Type.bool()
var any_vars_t = varargs(any_t)

var tuple_none_t = Type.tuple({})
var tuple_any_t = Type.tuple({any_vars_t})

return {
	any = -> return any_t
	, nil = -> return nil_t
	, num = -> return num_t
	, str = -> return str_t
	, bool = -> return bool_t
	, any_vars = -> return any_vars_t
	, tuple_none = -> return tuple_none_t
	, tuple_any = -> return tuple_any_t

	, tuple = Type.tuple
	, func = Type.func
	, tbl = Type.tbl
	, or = Type.or
	, and = Type.and
	, name = Type.name
	, index = Type.index
	, typeof = Type.typeof

	, varargs = varargs
	, same = same
	, clone = clone
	, get_tbl = get_tbl
	, tostr = tostr
}
