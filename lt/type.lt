var Tag = require('lua.tag')
var TType = Tag.Type

--``
1,2,3, .. typevar
# number
$ string
! bool
. vararg
- optional/nillable. If used in func return [:-] means void
* any, but not pure nil
[:] type tuple to type tuple - function
{:} type to type - table
{} array
~1,2,3... typeof
--``

var create = \tag, node ->
	assert('table' == type(node))
	node.tag = tag
	return node

var id = 0

-- table needed, coz some function names are keywords
var Type = {
	new = ->
		id = id + 1
		return create(TType.New, {id = id})

	, any = ->
		return create(TType.Any, {})

	, nil = ->
		return create(TType.Nil, {})

	, num = ->
		return create(TType.Val, {type = "num"})

	, str = ->
		return create(TType.Val, {type = "str"})

	, bool = ->
		return create(TType.Val, {type = "bool"})

	-- array of types
	, tuple = \types ->
		return create(TType.Tuple, types)

	-- ins and outs are tuples
	, func = \ins, outs ->
		return create(TType.Ref, {ins = ins, outs = outs})

	-- Lua table key can be any type
	-- If it's string, we'll use back the string literal, else it'll be a Type object
	-- typetypes is array of { type: type } or { name: type }
	, tbl = \typetypes ->
		return create(TType.Ref, typetypes)

	, or = \left, right ->
		return create(TType.Or, {left = left, right = right})

	, and = \left, right ->
		return create(TType.And, {left = left, right = right})

	, index = \obj, prop ->
		return create(TType.Index, {obj = obj, prop = prop})

	-- only identifier accepted, not ls
	, typeof = \name ->
		return create(TType.Typeof, {name = name})
}


var varargs = \t ->
	assert(TType[t.tag])  -- must be type node
	t.varargs = true
	return t



var tostr
var tolst = \ls ->
	var out = {}
	for i, p in ipairs(ls)
		out[i] = tostr(p)
	return table.concat(out, ',')

var Str = {}
tostr = \t ->
	assert(TType[t.tag])
	var rule = Str[t.tag]
	return rule(t)

-- build switch table only once
Str[TType.New] = \t ->
	return "T" .. t.id

Str[TType.Any] = \t ->
	return "any"

Str[TType.Nil] = \t ->
	return "nil"

Str[TType.Val] = \t ->
	return t.type

Str[TType.Ref] = \t ->
	if t.ins
		var out = {'[', tolst(t.ins), ':', tolst(t.outs), ']'}
		return table.concat(out)

	var out, o = {}, 1
	var val
	for _, ty in ipairs(t)
		var vty = ty[1]
		var kty = ty[2]
		if kty
			if "string" == type(kty)
				out[o] = kty .. ': ' .. tostr(vty)
			else
				out[o] = tostr(kty) .. ': ' .. tostr(vty)
			o = o + 1
		else
			val = tostr(vty)
	
	var ls = table.concat(out, ', ')
	if val
		ls = val .. ', ' .. ls
	return '{' .. ls .. '}'


Str[TType.Or] = \t ->
	return tostr(t.left) .. '|' .. tostr(t.right)

Str[TType.And] = \t ->
	return tostr(t.left) .. '&' .. tostr(t.right)



-- check if ast are the same
var same
same = \a, b ->
	if a and b and a.tag == b.tag
		-- http://stackoverflow.com/questions/27674367/lua-check-if-a-table-can-be-looped-through-via-ipairs-ipairs-starting-at-0
		if #a ~= #b
			return false

		-- check array part
		var last = 1
		for i, v in ipairs(a)
			last = i
			if 'table' == type(v)
				if not same(v, b[i])
					return false
			else if b[i] ~= v
				return false

		-- check hashmap part
		for k, v in pairs(a)
			if 'number' ~= type(k) or k < 1 or k > last or math.floor(k) ~= k
				-- ignore line,col
				if k ~= 'line' and k ~= 'col'
					if 'table' == type(v)
						if not same(v, b[k])
							return false
					else if b[k] ~= v
						return false

		-- b may have more keys than a
		for k, v in pairs(b)
			if 'number' ~= type(k) or k < 1 or k > last or math.floor(k) ~= k
				-- ignore line,col
				if k ~= 'line' and k ~= 'col'
					if 'table' == type(v)
						if not same(v, a[k])
							return false
					else if a[k] ~= v
						return false

		return true
	return false



return {
	new = Type.new
	, any = Type.any
	, nil = Type.nil
	, num = Type.num
	, str = Type.str
	, bool = Type.bool
	, tuple = Type.tuple
	, func = Type.func
	, tbl = Type.tbl
	, or = Type.or
	, and = Type.and
	, index = Type.index
	, typeof = Type.typeof
	
	, varargs = varargs
	, same = same
	, tostr = tostr
}
