var lexer = require('lt.lex')
var parse = require('lt.parse')
var ast = require('lt.ast').New()
var read = require('lt.read')

-- Take the AST tree and produce a string that can be passed to the function "loadstring".
var generate = require('lt.generate')

var lang_error = \msg ->
	if string.sub(msg, 1, 8) == "LT-ERROR"
		return false, string.sub(msg, 9)
	else
		error(msg)

var compile = \reader, filename, options ->
	var ls = lexer(reader, filename)
	
	var ok, tree, code
	ok, tree = pcall(parse, ast, ls)
	if not ok
		return lang_error(tree)
	
	ok, code = pcall(generate, tree, filename)
	if not ok
		return lang_error(code)
	
	return true, code

var load_string = \src, filename, options ->
	return compile(read.string(src), filename or "stdin", options)


var load_file = \filename, options ->
	return compile(read.file(filename), filename or "stdin", options)

return {
	string = load_string
	, file = load_file
}
