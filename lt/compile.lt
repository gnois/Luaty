var read = require('lua.read')
var warn = require('lua.warn')
var lex = require('lua.lex')
var scope = require('lua.scope')
var parse = require('lua.parse')
var check = require('lua.check')
var transform = require('lua.transform')
var generate = require('lua.generate')

--`
options is a table:
 options = {
    declares = {ngx = true, xvars = true, ...}
    , silent = {...}
 }
 color is a table of ansi color values to display warnings
--`

var compile = \reader, options, color ->

	var lexer = lex(reader, warn.add)
	var tree = parse(lexer, warn.add)
	tree = transform(tree)
	var sc = scope(options.declares, warn.add)
	check(sc, tree, warn.add)

	-- not generating if severity >= 10
	for _, w in ipairs(warn.warnings)
		if w.severity >= 10
			return nil, warn.format(color)

	return generate(tree), warn.format(color)


return {
	string = \src, options, color ->
		return compile(read.string(src), options or {}, color)
	
	, file = \filename, options, color ->
		return compile(read.file(filename), options or {}, color)
}
