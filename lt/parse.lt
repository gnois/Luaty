var operator = require("lt.operator")

var LJ_52 = false

var IsLastStatement = { TK_return = true, TK_break  = true }
var EndOfBlock = { TK_dedent = true, TK_else = true, TK_until = true, TK_eof = true }
var NewLine = { TK_newline = true }
var EmptyFunction = { [','] = true, ['}'] = true, [')'] = true }

var ReservedKeyword = { ['and'] = 1, ['break'] = 2, ['do'] = 3, ['else'] = 4, ['elseif'] = 5, ['end'] = 6, ['false'] = 7, ['for'] = 8, ['function'] = 9, ['goto'] = 10, ['if'] = 11, ['in'] = 12, ['local'] = 13, ['nil'] = 14, ['not'] = 15, ['or'] = 16, ['repeat'] = 17, ['return'] = 18, ['then'] = 19, ['true'] = 20, ['until'] = 21, ['while'] = 22, ['var'] = 23 }

var is_keyword = \ls ->
	var str = ls.token2str(ls.token)
	if ReservedKeyword[str]
		return str


-- indentation stack within a multi line expr/stmt
var indent

var err_syntax = \ls, em ->
	--ls.error(@, ls.token, em)
	var msg = string.format("%s:%d   %s", ls.chunkname, ls.linenumber, em)
	error("LT-ERROR" .. msg, 0)


var err_token = \ls, token ->
	ls.error(@, ls.token, "'%s' expected", ls.token2str(token))


var err_symbol = \ls ->
	var sym = ls.tokenval or ls.token2str(ls.token)
	var replace = {['end'] = "<dedent>", ['local'] = "'var'", ['function'] = "\\...->", ['elseif'] = "'else if'", ['repeat'] = "'do'"}
	var rep = replace[sym]
	var msg
	if rep
		msg = string.format("use %s instead of '%s'", rep, sym)
	else
		msg = string.format("unexpected %s", sym)

	err_syntax(ls, msg)


var lex_opt = \ls, tok ->
	if ls.token == tok
		ls.next(@)
		return true

	return false


-- return true only if a real indent is eaten
var lex_indent = \ls, eat_nl ->
	if NewLine[ls.token]
		if ls.lookahead(@) == 'TK_indent'
			ls.next(@)  -- eat the newline
			ls.next(@)
			indent = indent + 1
			return true
		else
			if eat_nl
				ls.next(@)
		
	

	return false


-- return true only if a real dedent is eaten
var lex_dedent = \ls, eat_nl ->
	if indent > 0
		if NewLine[ls.token]
			if ls.lookahead(@) == 'TK_dedent'
				ls.next(@)  -- eat the newline
				ls.next(@)
				indent = indent - 1
				return true
			else
				if eat_nl
					ls.next(@)  -- eat the newline
			
		
		else if ls.token == 'TK_dedent'
			ls.next(@)
			indent = indent - 1
			return true
	

	return false


var lex_check = \ls, tok ->
	if ls.token ~= tok err_token(ls, tok) 
	ls.next(@)


var lex_match = \ls, what, who, line ->
	if not lex_opt(ls, what)
		if line == ls.linenumber
			err_token(ls, what)
		else
			var token2str = ls.token2str
			ls.error(@, ls.token, "'%s' expected to match '%s' at line %d", token2str(what), token2str(who), line)
	



var in_scope = \ast, ls, v ->
	if v.name
		var scope = ast.current
		while not scope.vars[v.name]
			scope = scope.parent
			if not scope
				return false
		
	
		return true

	return false


var shadow_check = \ast, ls, vars ->
	var n = #vars
	for i = 1, n
		var v = vars[i]
		for j = i+1, n
			if vars[j] == v
				err_syntax(ls, "duplicate `var " .. v .. "`")
		
	

		var scope = ast.current
		do
			if scope.vars[v]
				err_syntax(ls, "shadowing previous `var " .. v .. "`")
		
			scope = scope.parent
		until not scope



var same_ast
same_ast = \a, b ->
	if a and b and a.kind == b.kind
		-- http://stackoverflow.com/questions/27674367/lua-check-if-a-table-can-be-looped-through-via-ipairs-ipairs-starting-at-0
		var last = 1
		if #a ~= #b
			return false
	
		for i, v in ipairs(a)
			last = i
			if "table" == type(v)
				if not same_ast(v, b[i])
					return false
			
			else if b[i] ~= v
				return false
		
	
		for k, v in pairs(a)
			if "number" ~= type(k) or k < 1 or k > last or math.floor(k) ~= k
				if "table" == type(v)
					if not same_ast(v, b[k])
						return false
				
				else if b[k] ~= v
					return false
			
		
	
		-- b may have more keys than a
		for k, v in pairs(b)
			if "number" ~= type(k) or k < 1 or k > last or math.floor(k) ~= k
				if "table" == type(v)
					if not same_ast(v, a[k])
						return false
				
				else if a[k] ~= v
					return false
			
		
	
		return true
  
	return false


var lex_str = \ls ->
	if ls.token ~= 'TK_name' and (LJ_52 or ls.token ~= 'TK_goto')
		err_token(ls, 'TK_name')

	var s = ls.tokenval
	ls.next(@)
	return s


var expr_primary, expr, expr_unop, expr_binop, expr_simple
var expr_list, expr_table
var parse_body, parse_block, parse_args, parse_opt_block

var var_name = \ast, ls ->
	var name = lex_str(ls)
	return ast.identifier(@, name)


var expr_field = \ast, ls, v ->
	ls.next(@) -- Skip dot or colon.
	var key = is_keyword(ls)
	if key
		ls.next(@)
		if key == "var"  -- `var` is not a Lua keyword
			return ast.expr_property(@, v, key)
	
		return ast.expr_index(@, v, ast.literal(@, key))

	key = lex_str(ls)
	return ast.expr_property(@, v, key)


var expr_bracket = \ast, ls ->
	ls.next(@) -- Skip '['.
	var v = expr(ast, ls)
	lex_check(ls, ']')
	return v


expr_table = \ast, ls ->
	var line = ls.linenumber
	var kvs = {}
	lex_check(ls, '{')
	while ls.token ~= '}'
		lex_indent(ls, true)
		lex_dedent(ls)
		-- in case the table ends immediately
		if ls.token == '}'
			break
	
		var key
		if ls.token == '['
			key = expr_bracket(ast, ls)
			lex_check(ls, '=')
		else if ls.lookahead(@) == '='
			if (ls.token == 'TK_name' or (not LJ_52 and ls.token == 'TK_goto'))
				var name = lex_str(ls)
				key = ast.literal(@, name)
			else if ls.token == 'TK_string'
				key = ast.literal(@, ls.tokenval)
				ls.next(@)
			else
				var name = is_keyword(ls)
				if name
					key = ast.literal(@, name)
					ls.next(@)
			
		
			lex_check(ls, '=')
	
		var val = expr(ast, ls)
		lex_indent(ls, true)
		lex_dedent(ls)
		if key
			for i = 1, #kvs
				var arr = kvs[i]
				if same_ast(arr[2], key)
					err_syntax(ls, "duplicate key at position " .. i .. " and " .. (#kvs + 1) .. " in table")
			
		
	
		kvs[#kvs + 1] = { val, key }  -- key can be nil
		if not lex_opt(ls, ',')
			break
	

	lex_dedent(ls, true)
	lex_match(ls, '}', '{', line)
	-- leave the last dedent for caller
	--lex_dedent(ls)
	return ast.expr_table(@, kvs, line)


expr_simple = \ast, ls ->
	var tk, val = ls.token, ls.tokenval
	var e
	if tk == 'TK_number'
		e = ast.literal(@, val)
	else if tk == 'TK_string'
		e = ast.literal(@, val)
	else if tk == 'TK_longstring'
		e = ast.longstrliteral(@, val)
	else if tk == 'TK_nil'
		e = ast.literal(@, nil)
	else if tk == 'TK_true'
		e = ast.literal(@, true)
	else if tk == 'TK_false'
		e = ast.literal(@, false)
	else if tk == 'TK_dots'
		if not ls.fs.varargs
			err_syntax(ls, "cannot use `...` outside a vararg function")
	
		e = ast.expr_vararg(@)
	else if tk == '{'
		return expr_table(ast, ls)
	else if tk == '\\' or tk == 'TK_lambda'
		if tk == '\\'
			ls.next(@)
	
		var curry, args, body, proto = parse_body(ast, ls, ls.linenumber)
		var lambda = ast.expr_function(@, args, body, proto)
		if curry
			curry = ast.identifier(@, 'curry')
			if not in_scope(ast, ls, curry)
				err_syntax(ls, curry.name .. "() is required for ~>")
		
			var cargs = { ast.literal(@, #args), lambda }
			return ast.expr_function_call(@, curry, cargs, line)
	
		return lambda
	else if tk == 'TK_curry'
		err_syntax(ls, "no argument to curry with ~>")
	else
		return expr_primary(ast, ls)

	ls.next(@)
	return e


expr_list = \ast, ls, indentable ->
	var exps = { }
	exps[1] = expr(ast, ls)
	if indentable
		lex_indent(ls, true)

	while lex_opt(ls, ',')
		if indentable
			lex_indent(ls, true)
			lex_dedent(ls)
	
		exps[#exps + 1] = expr(ast, ls)
		if indentable
			lex_indent(ls, true)
			lex_dedent(ls)
	

	var n = #exps
	if n > 0
		exps[n] = ast.set_expr_last(@, exps[n])

	return exps


expr_unop = \ast, ls ->
	var tk = ls.token
	if tk == 'TK_not' or tk == '-' or tk == '#'
		var line = ls.linenumber
		ls.next(@)
		var v = expr_binop(ast, ls, operator.unary_priority)
		return ast.expr_unop(@, ls.token2str(tk), v, line)
	else
		return expr_simple(ast, ls)



-- Parse binary expressions with priority higher than the limit.
expr_binop = \ast, ls, limit ->
	var v = expr_unop(ast, ls)
	var op = ls.token2str(ls.token)
	while operator.is_binop(op) and operator.left_priority(op) > limit
		var line = ls.linenumber
		ls.next(@)
		var v2, nextop = expr_binop(ast, ls, operator.right_priority(op))
		v = ast.expr_binop(@, op, v, v2, line)
		op = nextop

	return v, op


expr = \ast, ls ->
	return expr_binop(ast, ls, 0) -- Priority 0: parse whole expression.


-- Parse primary expression.
expr_primary = \ast, ls ->
	var v, vk
	-- Parse prefix expression.
	if ls.token == '('
		var line = ls.linenumber
		ls.next(@)
		vk, v = 'expr', ast.expr_brackets(@, expr(ast, ls))
		lex_match(ls, ')', '(', line)
	else if ls.token == 'TK_name' or (not LJ_52 and ls.token == 'TK_goto')
		vk, v = 'var', var_name(ast, ls)
	else
		err_symbol(ls)

	var key
	while true -- Parse multiple expression suffixes.
		var line = ls.linenumber
		if ls.token == '.'
			vk, v = 'indexed', expr_field(ast, ls, v)
		else if ls.token == '['
			key = expr_bracket(ast, ls)
			vk, v = 'indexed', ast.expr_index(@, v, key)
		else if ls.token == ':'
			err_syntax(ls, "use of `:` is not supported")
		else if ls.token == '(' -- or ls.token == 'TK_string' or ls.token == '{'
			var args = parse_args(ast, ls)
			-- if vk is indexed and first argument is @, it is a method call
			if vk == 'indexed' and args[1] and args[1].kind == 'Identifier' and args[1].name == 'self'
				table.remove(args, 1)
				vk, v = 'call', ast.expr_method_call(@, v, args, line)
			else
				vk, v = 'call', ast.expr_function_call(@, v, args, line)
		
		else
			break
	

	return v, vk


-- Parse statements ----------------------------------------------------

-- Parse 'return' statement.
var parse_return = \ast, ls, line ->
	ls.next(@) -- Skip 'return'.
	lex_opt(ls, 'TK_newline')
	ls.fs.has_return = true
	var exps
	if EndOfBlock[ls.token] -- or ls.token == ';'
		exps = { }
	else -- Return with one or more values.
		exps = expr_list(ast, ls)

	return ast.return_stmt(@, exps, line)


-- Parse numeric 'for'.
var parse_for_num = \ast, ls, varname, line ->
	ast.fscope_begin(@)
	lex_check(ls, '=')
	var init = expr(ast, ls)
	lex_check(ls, ',')
	var last = expr(ast, ls)
	var step
	if lex_opt(ls, ',')
		step = expr(ast, ls)
	else
		step = ast.literal(@, 1)

	var v = ast.identifier(@, varname)
	ast.var_declare(@, varname)  -- add to scope
	var body = parse_opt_block(ast, ls, line, 'TK_for')
	ast.fscope_end(@)
	return ast.for_stmt(@, v, init, last, step, body, line, ls.linenumber)


-- Parse 'for' iterator.
var parse_for_iter = \ast, ls, indexname ->
	ast.fscope_begin(@)
	var vars = { ast.identifier(@, indexname) }
	ast.var_declare(@, indexname)
	while lex_opt(ls, ',')
		indexname = lex_str(ls)
		vars[#vars + 1] = ast.identifier(@, indexname)
		ast.var_declare(@, indexname)

	lex_check(ls, 'TK_in')
	var line = ls.linenumber
	var exps = expr_list(ast, ls)
	var body = parse_opt_block(ast, ls, line, 'TK_for')
	ast.fscope_end(@)
	return ast.for_iter_stmt(@, vars, exps, body, line, ls.linenumber)


-- Parse 'for' statement.
var parse_for = \ast, ls, line ->
	ls.next(@)  -- Skip 'for'.
	var varname = lex_str(ls)  -- Get first variable name.
	var stmt
	if ls.token == '='
		stmt = parse_for_num(ast, ls, varname, line)
	else if ls.token == ',' or ls.token == 'TK_in'
		stmt = parse_for_iter(ast, ls, varname)
	else
		err_syntax(ls, "'=' or 'in' expected")

	return stmt


-- Parse function call argument list.
parse_args = \ast, ls ->
	var line = ls.linenumber
	lex_check(ls, '(')
	--if not LJ_52 and line ~= ls.lastline
	--    err_syntax(ls, "ambiguous syntax (function call x new statement)")
	
	lex_indent(ls, true)
	var args
	if ls.token ~= ')'
		args = expr_list(ast, ls, true)
	else
		args = { }

	lex_dedent(ls, true)
	lex_match(ls, ')', '(', line)
	-- leave the last dedent for caller
	--lex_dedent(ls)

	--[[  function call must have parens `()`, in which we allow newlines
	if ls.token == '('
		...
	else if ls.token == '{'
		var a = expr_table(ast, ls)
		args = { a }
	else if ls.token == 'TK_string'
		var a = ls.tokenval
		ls.next(@)
		args = { ast.literal(@, a) }
	else if ls.token == 'TK_longstring'
		var a = ls.tokenval
		ls.next(@)
		args = { ast.longstrliteral(@, a) }
	else
		err_syntax(ls, "function arguments expected")

	--]]
	return args



var parse_assignment
parse_assignment = \ast, ls, vlist, v, vk ->
	var line = ls.linenumber
	if vk ~= 'var' and vk ~= 'indexed'
		err_syntax(ls, "syntax error, unexpected " .. ls.token2str(ls.token) or ls.tokenval)

	vlist[#vlist+1] = v
	if lex_opt(ls, ',')
		var n_var, n_vk = expr_primary(ast, ls)
		return parse_assignment(ast, ls, vlist, n_var, n_vk)
	else -- Parse RHS.
		lex_check(ls, '=')
		if vk == 'var' and not in_scope(ast, ls, v)
			err_syntax(ls, "undeclared identifier " .. v.name)
	
		var exps = expr_list(ast, ls)
		return ast.assignment_expr(@, vlist, exps, line)



var parse_call_assign = \ast, ls ->
	var v, vk = expr_primary(ast, ls)
	if vk == 'call'
		return ast.new_statement_expr(@, v, ls.linenumber)
	else
		var vlist = { }
		return parse_assignment(ast, ls, vlist, v, vk)



-- Parse 'var' statement.
var parse_var = \ast, ls ->
	var line = ls.linenumber
	var vl = { }
	do -- Collect LHS.
		vl[#vl+1] = lex_str(ls)
	until not lex_opt(ls, ',')
	shadow_check(ast, ls, vl)

	var exps
	if lex_opt(ls, '=') -- Optional RHS.
		exps = expr_list(ast, ls)
	else
		exps = { }

	return ast.local_decl(@, vl, exps, line)


var parse_while = \ast, ls, line ->
	ls.next(@) -- Skip 'while'.
	ast.fscope_begin(@)
	var cond = expr(ast, ls)
	var body = parse_opt_block(ast, ls, line, 'TK_while')
	var lastline = ls.linenumber
	ast.fscope_end(@)
	return ast.while_stmt(@, cond, body, line, lastline)


var parse_if = \ast, ls, line ->
	var tests, blocks = { }, { }
	ls.next(@)
	tests[#tests+1] = expr(ast, ls)
	ast.fscope_begin(@)
	blocks[1] = parse_opt_block(ast, ls, line, 'TK_if')
	ast.fscope_end(@)
	var else_branch
	while ls.token == 'TK_else'
		ls.next(@)
		if ls.token == 'TK_if'
			ls.next(@)
			tests[#tests+1] = expr(ast, ls)
			ast.fscope_begin(@)
			blocks[#blocks+1] = parse_opt_block(ast, ls, ls.linenumber, 'TK_if')
			ast.fscope_end(@)
		else
			ast.fscope_begin(@)
			else_branch = parse_opt_block(ast, ls, ls.linenumber, 'TK_else')
			ast.fscope_end(@)
			break
	

	return ast.if_stmt(@, tests, blocks, else_branch, line)


var parse_do = \ast, ls, line ->
	ls.next(@) -- Skip 'do'
	ast.fscope_begin(@)
	var body = parse_opt_block(ast, ls, line, 'TK_do')
	var lastline = ls.linenumber
	if lex_opt(ls, 'TK_until')
		var cond = expr(ast, ls) -- until condition.
		ast.fscope_end(@)
		return ast.repeat_stmt(@, cond, body, line, lastline)
	else
		ast.fscope_end(@)
		return ast.do_stmt(@, body, line, lastline)




var parse_label = \ast, ls ->
	ls.next(@) -- Skip '::'.
	var name = lex_str(ls)
	lex_check(ls, 'TK_label')
	-- Recursively parse trailing statements: labels and ';' (Lua 5.2 only).
	while true
		if ls.token == 'TK_label'
			parse_label(ast, ls)
		--else if LJ_52 and ls.token == ';'
		--    ls.next(@)
		else
			break
	

	return ast.label_stmt(@, name, ls.linenumber)


var parse_goto = \ast, ls ->
	var line = ls.linenumber
	var name = lex_str(ls)
	return ast.goto_stmt(@, name, line)


-- Parse a statement. Returns the statement itself and a boolean that tells if it
-- must be the last one in a chunk.
var parse_stmt = \ast, ls ->
	var line = ls.linenumber
	var stmt
	if ls.token == 'TK_if'
		stmt = parse_if(ast, ls, line)
	else if ls.token == 'TK_while'
		stmt = parse_while(ast, ls, line)
	else if ls.token == 'TK_do'
		stmt = parse_do(ast, ls, line)
	else if ls.token == 'TK_for'
		stmt = parse_for(ast, ls, line)
	--else if ls.token == 'TK_repeat'
	--    stmt = parse_repeat(ast, ls, line)
	--else if ls.token == 'TK_function'
	--    stmt = parse_func(ast, ls, line)
	else if ls.token == 'TK_lambda' or ls.token == 'TK_curry'
		err_syntax(ls, "lambda must be an expression")
	else if ls.token == 'TK_var'
		ls.next(@)
		stmt = parse_var(ast, ls, line)
	else if ls.token == 'TK_return'
		stmt = parse_return(ast, ls, line)
		return stmt, true -- Must be last.
	else if ls.token == 'TK_break'
		ls.next(@)
		stmt = ast.break_stmt(@, line)
		return stmt, not LJ_52 -- Must be last in Lua 5.1.
	--else if LJ_52 and ls.token == ';'
	--    ls.next(@)
	--    return parse_stmt(ast, ls)
	else if ls.token == 'TK_label'
		stmt = parse_label(ast, ls)
	else if ls.token == 'TK_goto'
		if LJ_52 or ls.lookahead(@) == 'TK_name'
			ls.next(@)
			stmt = parse_goto(ast, ls)
	

	-- If here 'stmt' is "nil" then ls.token didn't match any of the previous rules.
	-- Fall back to call/assign rule.
	if not stmt
		stmt = parse_call_assign(ast, ls)

	return stmt, false


-- Parse function definition parameters
var parse_params = \ast, ls ->
	var args = { }
	if ls.token ~= 'TK_lambda' and ls.token ~= 'TK_curry'
		do
			if ls.token == 'TK_name' or (not LJ_52 and ls.token == 'TK_goto')
				var name = lex_str(ls)
				args[#args+1] = ast.var_declare(@, name)
			else if ls.token == 'TK_dots'
				ls.next(@)
				ls.fs.varargs = true
				args[#args + 1] = ast.expr_vararg(@)
				break
			else
				err_token(ls, "lambda argument expected")
		
		until not lex_opt(ls, ',')

	if ls.token == 'TK_lambda'
		ls.next(@)
		return false, args
	else if ls.token == 'TK_curry'
		if ls.fs.varargs
			err_syntax(ls, "cannot curry varargs with ~>")
	
		if #args < 2
			err_syntax(ls, "at least 2 arguments needed with ~>")
	
		ls.next(@)
		return true, args

	err_token(ls, "->")


var parse_block_stmts = \ast, ls ->
	var firstline = ls.linenumber
	var stmt, islast = nil, false
	var body = { }
	while not islast and not EndOfBlock[ls.token]
		stmt, islast = parse_stmt(ast, ls)
		body[#body + 1] = stmt
		lex_opt(ls, 'TK_newline')

	return body, firstline, ls.linenumber


var parse_chunk = \ast, ls ->
	var body, firstline, lastline = parse_block_stmts(ast, ls)
	return ast.chunk(@, body, ls.chunkname, 0, lastline)


-- parse single or indented compound statement
parse_opt_block = \ast, ls, line, match_token ->
	var body = {}
	if lex_indent(ls)
		body = parse_block(ast, ls, line)
		--lex_match(ls, 'TK_dedent', match_token, line)
		if not lex_dedent(ls)
			ls.error(@, ls.token, "<dedent> expected to end %s at line %d", ls.token2str(match_token), line)
	
	else
		if not EndOfBlock[ls.token] and not NewLine[ls.token] and not EmptyFunction[ls.token]
			-- single statement
			-- this is not worst than C single statement without brace
			body[1] = parse_stmt(ast, ls)
			body.firstline, body.lastline = line, ls.linenumber
		-- if lookahead is indent, it belongs to parent block
		if NewLine[ls.token] and ls.lookahead(@) ~= 'TK_indent'
			ls.next(@)
	return body


-- Parse body of a function
parse_body = \ast, ls, line ->
	var pfs = ls.fs
	ls.fs = { varargs = false }
	ast.fscope_begin(@)
	ls.fs.firstline = line
	var curry, args = parse_params(ast, ls)
	var body = parse_opt_block(ast, ls, line, 'TK_lambda')
	ast.fscope_end(@)
	var proto = ls.fs
	ls.fs.lastline = ls.linenumber
	ls.fs = pfs
	return curry, args, body, proto



parse_block = \ast, ls, firstline ->
	--ast.fscope_begin(@)
	var body = parse_block_stmts(ast, ls)
	body.firstline, body.lastline = firstline, ls.linenumber
	--ast.fscope_end(@)
	return body


var parse = \ast, ls ->
	indent = 0
	ls.next(@)
	lex_opt(ls, 'TK_newline')
	ls.fs = { varargs = false }
	ast.fscope_begin(@)
	var args = { ast.expr_vararg(@, ast) }
	var chunk = parse_chunk(ast, ls)
	ast.fscope_end(@)
	if ls.token == 'TK_dedent'
		err_syntax(ls, "<dedent> expected near the previous statement/expression")
	else if ls.token ~= 'TK_eof'
		err_syntax(ls, "unexpected extra '" .. ls.token2str(ls.token) .. "'")

	assert(indent == 0)
	return chunk


return parse
