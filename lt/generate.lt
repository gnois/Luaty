var Tag = require('lt.tag')
var reserved = require('lt.reserved')
var operator = require('lt.operator')
var chars = require('lt.chars')

var TStmt = Tag.Stmt
var TExpr = Tag.Expr
var Keyword = reserved.Keyword
var format = string.format
var concat = table.concat
var is = chars.is


var generate = \stmts ->
	
	var Stmt = {}
	var Expr = {}
	var dent = -1
	var indent = \i ->
		dent = dent + i
		return "\n" .. string.rep("    ", dent)

	var emit_block = \header, body, footer ->
		var more = indent(1)
		var list = {}
		for i, node in ipairs(body)
			var rule = Stmt[node.tag]
			list[i] = rule(node)
		var less = indent(-1)
		return concat({header, more, concat(list, more), less, footer})

	var emit_expr = \node ->
		var rule = Expr[node.tag]
		return rule(node)

	var to_expr = \node, bracket ->
		var val = emit_expr(node)
		if bracket
			return "(" .. val .. ")"
		return val

	var emit_exprs = \exps ->
		var strls = {}
		var last = #exps
		for k = 1, last
			strls[k] = to_expr(exps[k], k == last and exps[k].bracketed)
		return concat(strls, ", ")

	var emit_params = \nodes ->
		var t = {}
		for i, node in ipairs(nodes)
			t[i] = node.tag == TExpr.Vararg and "..." or node.name
		return concat(t, ", ")

	var is_plain_string = \node ->
		if node.tag == TExpr.String and type(node.value) == "string"
			var str = node.value
			var c = string.sub(str, 1, 1)
			if c == '' or not is.letter(c)
				return false

			for k = 2, #str
				c = string.sub(str, k, k)
				if not is.letter(c) and not is.digit(c)
					return false

			return not Keyword[str]

	var priority = \val ->
		return val, operator.ident_priority


	Expr[TExpr.Id] = \node ->
		return priority(node.name)

	Expr[TExpr.Number] = \node ->
		return priority(node.value)

	Expr[TExpr.Bool] = \node ->
		return priority(tostring(node.value))

	Expr[TExpr.Nil] = ->
		return priority("nil")

	Expr[TExpr.Vararg] = ->
		return priority("...")


	var escape = \s ->
		var replace = {
			'"' = `\"`, '\a' = `\a`, '\b' = `\b`, '\f' = `\f`, '\n' = `\n`, '\r' = `\r`, '\t' = `\t`, '\v' = `\v`
		}
		return string.gsub(s, '["\a\b\f\n\r\t\v]', replace)

	Expr[TExpr.String] = \node ->
		var val = node.value
		var text = val
		if node.long
			-- convert `` to [=[       meaning 2 backtick to 1 equal sign
			var n, m = string.find(val, "^`+")
			if n
				var p, q = string.find(val,"`+$")
				assert(q-p == m-n)
				var eq = string.rep('=', m - n)
				var ls = { "[", eq, "[", string.sub(val, m+1, p-1), "]", eq, "]" }
				text = priority(concat(ls))
		else
			text = format('"%s"', escape(val))
		return priority(text)


	Expr[TExpr.Function] = \node ->
		var header = "function(" .. emit_params(node.params) .. ")"
		var code = emit_block(header, node.body, "end")
		return code, 0

	Expr[TExpr.Table] = \node ->
		var hash = {}
		var last = #node.valkeys
		var more = last > 5 and indent(1) or ""
		
		for i = 1, last
			var vk = node.valkeys[i]
			var val = emit_expr(vk[1])
			var key = vk[2]
			if key
				if is_plain_string(key)
					hash[i] = format("%s = %s", key.value, val)
				else
					hash[i] = format("[%s] = %s", emit_expr(key), val)
			
			else
				if i == last and vk[1].bracketed
					hash[i] = "(" .. val .. ")"
				else
					hash[i] = val

		var less = last > 5 and indent(-1) or ""
		var content = ""
		if last > 0
			content = more .. concat(hash, more .. ", ") .. less
		return priority("{" .. content .. "}")


	var receiver = \target ->
		var obj, prio = emit_expr(target)
		var t = target.tag
		if prio < operator.ident_priority or t == TExpr.String or t == TExpr.Number or t == TExpr.Bool or t == TExpr.Table
			return "(" .. obj .. ")"
		return obj

	Expr[TExpr.Index] = \node ->
		var exp = format("%s[%s]", receiver(node.obj), emit_expr(node.idx))
		return priority(exp)

	Expr[TExpr.Field] = \node ->
		var exp = format("%s.%s", receiver(node.obj), node.field)
		return priority(exp)

	Expr[TExpr.Invoke] = \node ->
		var exp = format("%s:%s(%s)", receiver(node.obj), node.field, emit_exprs(node.args))
		return priority(exp)

	Expr[TExpr.Call] = \node ->
		var exp = format("%s(%s)", receiver(node.func), emit_exprs(node.args))
		return priority(exp)

	Expr[TExpr.Unary] = \node ->
		var arg, arg_prio = emit_expr(node.right)
		var op_prio = operator.unary_priority
		if arg_prio < op_prio arg = format("(%s)", arg) 
		var op = node.op
		if op == 'not' op = 'not ' 
		return format("%s%s", op, arg), operator.unary_priority

	Expr[TExpr.Binary] = \node ->
		var oper = node.op
		var lprio = operator.left_priority(oper)
		var rprio = operator.right_priority(oper)
		var a, alprio, arprio = emit_expr(node.left)
		var b, blprio, brprio = emit_expr(node.right)
		if not arprio arprio = alprio 
		if not brprio brprio = blprio 
		var ap = arprio <  lprio and format("(%s)", a) or a
		var bp = blprio <= rprio and format("(%s)", b) or b
		return format("%s %s %s", ap, oper, bp), lprio, rprio


	---------------- Statements -----
	Stmt[TStmt.Expr] = \node ->
		return emit_expr(node.expr)

	Stmt[TStmt.Local] = \node ->
		var line = "local " .. emit_params(node.vars)
		if #node.exprs > 0
			return line .. " = " ..  emit_exprs(node.exprs)
		return line

	Stmt[TStmt.Assign] = \node ->
		return emit_exprs(node.lefts) .. " = " .. emit_exprs(node.rights)

	Stmt[TStmt.Do] = \node ->
		return emit_block("do", node.body, "end")

	Stmt[TStmt.If] = \node ->
		var body = {}
		var ncons = #node.tests
		for i = 1, ncons
			var test = emit_expr(node.tests[i])
			var header = format("%s %s then", i == 1 and "if" or "elseif", test)
			body[i] = emit_block(header, node.thenss[i], i == ncons and not node.elses and "end" or "")
		if node.elses
			body[#body + 1] = emit_block("else", node.elses, "end")
		return concat(body)

	Stmt[TStmt.Forin] = \node ->
		var header = format("for %s in %s do", emit_params(node.vars), emit_exprs(node.exprs))
		return emit_block(header, node.body, "end")

	Stmt[TStmt.Fornum] = \node ->
		var istart = emit_expr(node.first)
		var iend = emit_expr(node.last)
		var header = format("for %s = %s, %s", node.var.name, istart, iend)
		if node.step
			header = header .. ", " .. emit_expr(node.step)
		return emit_block(header .. " do", node.body, "end")

	Stmt[TStmt.While] = \node ->
		var header = "while " .. emit_expr(node.test) .. " do"
		return emit_block(header, node.body, "end")

	Stmt[TStmt.Repeat] = \node ->
		return emit_block("repeat", node.body, "until ".. emit_expr(node.test))

	Stmt[TStmt.Return] = \node ->
		return "return " .. emit_exprs(node.exprs)

	Stmt[TStmt.Break] = ->
		return "break"

	Stmt[TStmt.Goto] = \node ->
		return "goto " .. node.name

	Stmt[TStmt.Label] = \node ->
		return "::" .. node.name .. "::"


	return emit_block("", stmts, "")


return generate
