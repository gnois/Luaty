var ty = require('lt.type')
var Tag = require('lt.tag')
var TType = Tag.Type

return ->
	-- list of type var to type expr
	var subs = {}

	------ subst in place --------------
	var Subst = {}
	var subst = \node, tvar, texp ->
		assert(tvar.tag == TType.New)
		var rule = Subst[node.tag]
		if rule
			return rule(node, tvar, texp)
		return node

	Subst[TType.New] = \node, tvar, texp ->
		if node.id == tvar.id
			return texp
		return node

	Subst[TType.Tuple] = \node, tvar, texp ->
		for i = 1, #node
			node[i] = subst(node[i], tvar, texp)
		return node

	Subst[TType.Func] = \node, tvar, texp ->
		node.ins = subst(node.ins, tvar, texp)
		node.outs = subst(node.outs, tvar, texp)
		return node

	Subst[TType.Tbl] = \node, tvar, texp ->
		for i = 1, #node
			var n = node[i]
			n[1] = subst(n[1], tvar, texp)
			n[2] = n[2] and subst(n[2], tvar, texp)
		return node

	Subst[TType.Or] = \node, tvar, texp ->
		for i = 1, #node
			node[i] = subst(node[i], tvar, texp)
		return node


	------ apply in place --------------
	var Apply = {}
	var apply = \node ->
		var rule = Apply[node.tag]
		if rule
			return rule(node)
		return node

	Apply[TType.New] = \node ->
		return subs[node.id] or node

	Apply[TType.Tuple] = \node ->
		for i = 1, #node
			node[i] = apply(node[i])
		return node

	Apply[TType.Func] = \node ->
		node.ins = apply(node.ins)
		node.outs = apply(node.outs)
		return node

	Apply[TType.Tbl] = \node ->
		for i = 1, #node
			var n = node[i]
			n[i] = apply(n[1])
			n[2] = n[2] and apply(n[2])
		return node

	Apply[TType.Or] = \node ->
		for i = 1, #node
			node[i] = apply(node[i])
		return node


	------ occur --------------
	var Occur = {}
	var occurs = \x, y ->
		var rule = Occur[y.tag]
		if rule
			return rule(x, y)
		return false

	Occur[TType.New] = \x, node ->
		return x.id == node.id

	Occur[TType.Tuple] = \x, node ->
		for _, p in ipairs(node)
			if occurs(x, p)
				return true
		return false
				
	Occur[TType.Func] = \x, node ->
		return occurs(x, node.ins) or occurs(x, node.outs)

	Occur[TType.Tbl] = \x, node ->
		for _, tk in ipairs(node)
			if occurs(x, tk[1]) or (tk[2] and occurs(x, tk[2]))
				return true
		return false

	Occur[TType.Or] = \x, node ->
		for _, t in ipairs(node)
			if occurs(x, t)
				return true
		return false


	var extend = \tvar, texp, ignore ->
		assert(tvar.tag == TType.New)
		if occurs(tvar, texp)
			return false, ignore and "" or ("contains recursive type " .. ty.tostr(tvar) .. " in " .. ty.tostr(texp))

		for id, t in ipairs(subs)
			subs[id] = subst(t, tvar, texp)
		subs[tvar.id] = texp
		return tvar


	------ unification --------------
	var unify

	var unify_tuple = \x, y, ignore ->
		var i, n = 0, #x
		-- check if y too few
		var t, err
		while i < n
			i = i + 1
			if y[i]
				t, err = unify(x[i], y[i], ignore)
				if not t
					return false, ignore and "" or ("parameter " .. i .. " " .. err)
			else
				if not x[i].varargs
					return false, ignore and "" or ("expects " .. n .. " arguments but only got " .. (i-1))
				return true

		-- check if y too many
		n = #y
		if i < n
			if i < 1 or not x[i].varargs
				return false, ignore and "" or ("expects only " .. i .. " arguments but got " .. n)

		return true


	-- return true if x is contained in y
	var unify_tbl = \x, y, ignore ->
		var key_str = \k ->
			return "string" == type(k) and k or ty.tostr(k)
			
		var keys = {}
		-- convert to lookup table
		for __, tty in ipairs(y)
			if tty[2]
				keys[tty[2]] = tty[1]
				
		for _, ttx in ipairs(x)
			if ttx[2]
				var vy = keys[ttx[2]]
				if vy
					var ok, err = unify(ttx[1], vy, ignore)
					if not ok
						return false, err
				else
					return false, ignore and "" or ("expects key `" .. key_str(ttx[2]) .. "` in " .. ty.tostr(y))

		return true


	-- return false, msg if type mismatch
	unify = \x, y, ignore ->
		-- shortcut
		if x == y
			return true
		x = apply(x)
		y = apply(y)

		if x.tag == TType.New
			return extend(x, y)

		if y.tag == TType.New
			return extend(y, x)

		-- any match all except pure nil
		if x.tag == TType.Any and y.tag ~= TType.Nil
			return true
			
		if y.tag == TType.Any and x.tag ~= TType.Nil
			return true

		if x.tag == TType.Or
			for _, t in ipairs(x)
				var tt = unify(t, y, ignore)
				if tt
					return tt

		if y.tag == TType.Or
			for _, t in ipairs(y)
				var tt = unify(x, t, ignore)
				if tt
					return tt

		if x.tag == y.tag
			if x.tag == TType.Nil
				return true

			if x.tag == TType.Val
				if x.type == y.type
					return true

			if x.tag == TType.Tuple
				return unify_tuple(x, y, ignore)
				
			if x.tag == TType.Func
				return unify(x.ins, y.ins, ignore)

			if x.tag == TType.Tbl
				return unify_tbl(x, y, ignore)


		if x.tag == TType.Tuple
			return unify(x[1] or ty.nil(), y)
			
		if y.tag == TType.Tuple
			return unify(x, y[1] or ty.nil())

		return false, ignore and "" or ("expects " .. ty.tostr(x) .. " instead of " .. ty.tostr(y))


	return {
		apply = apply
		, extend = extend
		, unify = unify
	}
