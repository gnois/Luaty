-- This is Lua 5.2.2 test case [goto.lua]

var errmsg = \code, m ->
  var st, msg = load(code)
  assert(not st and string.find(msg, m))


-- cannot see label inside block
errmsg(` goto l1; do ::l1:: end `, "label 'l1'")
errmsg(`` do ::l1:: end goto l1; ``, "label 'l1'")

-- repeated label
errmsg(` ::l1:: ::l1:: `, "label 'l1'")


-- undefined label
errmsg(` goto l1; local aa ::l1:: ::l2:: print(3) `, "local 'aa'")

-- jumping over variable definition
errmsg(`
do local bb, cc; goto l1; end
local aa
::l1:: print(3)
`, "local 'aa'")

-- cannot continue a repeat-until with variables
errmsg(``
  repeat
    if x then goto cont end
    local xuxu = 10
    ::cont::
  until xuxu < x
``, "local 'xuxu'")

-- simple gotos
var x
do
  var y = 12
  goto l1
  ::l2::
  x = x + 1
  goto l3
  ::l1::
  x = y
  goto l2

::l3::
::l3_1::
assert(x == 13)


-- long labels
do
  var prog = ``
  do
    local a = 1
    goto l%sa; a = a + 1
   ::l%sa:: a = a + 10
    goto l%sb; a = a + 2
   ::l%sb:: a = a + 20
    return a
  end
  ``
  var label = string.rep("0123456789", 40)
  prog = string.format(prog, label, label, label, label)
  assert(assert(load(prog))() == 31)


-- goto to correct label when nested
do 
  goto l3
  ::l3::    -- does not loop jumping to previous label 'l3'

-- ok to jump over local dec. to end of block
do
  goto l1
  var a = 23
  x = a
  ::l1:: --;        -- semicolon makes a difference in LuaJIT



while true
  goto l4
  goto l1  -- ok to jump over local dec. to end of block
  goto l1  -- multiple uses of same label
  var x = 45
  ::l1:: 

::l4::
assert(x == 13)


if print
  goto l1   -- ok to jump over local dec. to end of block
  error("should not be here")
  goto l2   -- ok to jump over local dec. to end of block
  var x
  ::l1::
  ::l2::        -- invalid in LuaJIT
else

-- to repeat a label in a different function is OK
var foo
foo = ->
  var a = {}
  goto l3
  ::l1::
  a[#a + 1] = 1
  goto l2
  ::l2::
  a[#a + 1] = 2
  goto l5
  ::l3::
  ::l3a::
  a[#a + 1] = 3
  goto l1
  ::l4::
  a[#a + 1] = 4
  goto l6
  ::l5::
  a[#a + 1] = 5
  goto l4
  ::l6::
  assert(a[1] == 3 and a[2] == 1 and a[3] == 2 and a[4] == 5 and a[5] == 4)
  if not a[6]
    a[6] = true
    goto l3a    -- do it twice


::l6::
foo()



--------------------------------------------------------------------------------
-- testing closing of upvalues

foo = ->
  var a = {}
  do
    var i = 1
    var k = 0
    a[0] = \y-> k = y
    ::l1::
    do
      var x
      if i > 2 goto l2
      a[i] = \y-> if y x = y else return x + k
      i = i + 1
      goto l1
  ::l2::
  return a

var a = foo()
a[1](10)
a[2](20)
assert(a[1]() == 10 and a[2]() == 20 and a[3] == nil)
a[0](13)
assert(a[1]() == 23 and a[2]() == 33)

--------------------------------------------------------------------------------
-- testing if x goto optimizations

var testG = \a ->
  if a == 1
    goto l1
    error("should never be here!")
  else if a == 2 goto l2
  else if a == 3 goto l3
  else if a == 4
    goto l1  -- go to inside the block
    error("should never be here!")
    ::l1::
    a = a + 1   -- must go to 'if' end
  else
    goto l4
    ::l4a::
    a = a * 2
    goto l4b
    error("should never be here!")
    ::l4::
    goto l4a
    error("should never be here!")
    ::l4b::
  
  do return a
  ::l2::
  do return "2"
  ::l3::
  do return "3"
  ::l1::
  return "1"


assert(testG(1) == "1")
assert(testG(2) == "2")
assert(testG(3) == "3")
assert(testG(4) == 5)
assert(testG(5) == 10)
--------------------------------------------------------------------------------


print('OK')
