
var sin, pi = math.sin, math.pi

var fft_bitreverse = \v, n->
    var j = 0
    for i=0,2*n-4,2 
        if i < j 
            v[i+1], v[i+2], v[j+1], v[j+2] = v[j+1], v[j+2], v[i+1], v[i+2]
        
        var k = n
        while k <= j 
          j = j - k
          k = k / 2 
        j = j + k

var fft_transform = \v, n, dir->
    if n <= 1
       return
    fft_bitreverse(v, n)
    var dual = 1
    do
        var dual2 = 2*dual
        for i=1,2*n-1,2*dual2 
            var j = i+dual2
            var ir, ii = v[i], v[i+1]
            var jr, ji = v[j], v[j+1]
            v[j], v[j+1] = ir - jr, ii - ji
            v[i], v[i+1] = ir + jr, ii + ji
        
        var theta = dir * pi / dual
        var s, s2 = sin(theta), 2.0 * sin(theta * 0.5)^2
        var wr, wi = 1.0, 0.0
        for a=3,dual2-1,2 
            wr, wi = wr - s*wi - s2*wr, wi + s*wr - s2*wi
            for i=a,a+2*(n-dual2),2*dual2
                var j = i+dual2
                var jr, ji = v[j], v[j+1]
                var dr, di = wr*jr - wi*ji, wr*ji + wi*jr
                var ir, ii = v[i], v[i+1]
                v[j], v[j+1] = ir - dr, ii - di
                v[i], v[i+1] = ir + dr, ii + di

        dual = dual2
    until dual >= n

var n = 64

var v = {}
for k = 1, 2*n 
    v[k] = (k - 1) % (n / 4)



-- floating point have to compared as string
var inc = require('tests.inc')

var result = {
   [1] = "448"
   , [2] = "512"
   , [17] = "-218.50966799188"
   , [18] = "90.509667991878"
   , [33] = "-128"
   , [49] = "-90.509667991878"
   , [50] = "-37.490332008122"
   , [65] = "-64"
   , [66] = "-64"
   , [81] = "-37.490332008122"
   , [82] = "-90.509667991878"
   , [98] = "-128"
   , [113] = "90.509667991878"
   , [114] = "-218.50966799188"
}

fft_transform(v, n, -1)
for k = 1, 2*n 
   --print(v[k])
   if inc.fmt(1, v[k]) ~= result[k]
      assert(v[k] == 0)


fft_transform(v, n, 1)
for k = 1, 2*n 
     --print(v[k] / n)
     assert(inc.fmt(1, v[k] / n) == tostring((k - 1)%16))
