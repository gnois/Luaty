-- single line multi assign

do
	var a, b, c = \... -> return, 3, 8
	assert(type(a) == 'function')
	assert(b + c == 11)

	var w, x, y = \... -> return, 30, 90
	assert(type(w) == 'function')
	assert(x + y == 120)

	var j = \... -> return 4, 6, ...
	var jt = {j(1, 2, 3)}
	assert(#jt == 5)


-- semicolon to end multi return
do
	var a, b, c = -> var d, e, f = 2, ->
		return -> return d, e, f;, d, e, f
	, 5;, 9, 4
	assert(type(a) == 'function')
	assert(b + c == 13)


	var x, y, z = ->
		return 4
	, -> return 1,3;, 7
	assert(type(x) == 'function')
	assert(y() == 1)
	assert(z == 7)


do
	var a, b, c = -> var d, e, f = 2, \... -> return -> return 7, 5
	(-> return 9)()
	assert(type(a) == 'function')
	assert(b == nil)

do
	var a, b, c = -> var d, e, f = 2, \... -> return -> return 7, 5;;;, (-> return 9)()
	assert(b == 9)
	assert(c == nil)

do
	var a, b, c = -> var d, e, f = 2, \... -> return -> return 9;;; , 5, 7
	assert(b + c == 12)

do
	var a, b, c = -> var d, e, f = 2, \... -> return -> return 7;; , 5; , 8, 9
	assert(b + c == 17)

do
	var a, b, c = -> var d, e, f = 2, \... -> return -> return 7;, 5; , 8;, 9
	assert(b == 9)




-- indexed assign in for loop
do
	var x = {}
	for k = 1, 10
		k, x[k] = k + 1, k*k + 1

	assert(x[1] == 2)
	assert(x[2] == 5)
	assert(x[3] == 10)


-- assign via multiple return value 
do
	var foo = \k-> return k*k, 2*k + 1

	var s = 3
	var a, b, c = 13, foo(s)

	assert(a == 13)
	assert(b == 9)
	assert(c == 7)



-- assignment in sub table

do
	var bar = \v, i->
		v.f[i+1], v.x, v.s[i] = i*i, i+5, 7*i


	var v = { }
	v.f, v.s = v, v

	bar(v, 1)
	assert(#v == 2)
	assert(v[1] == 7)
	assert(v[2] == 1)
