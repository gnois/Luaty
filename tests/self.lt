var se = {}

se.q = \@ ->


assert(se.q() == nil)

se.x = \@, line ->
	var a = 1
	var b = 2
	return a + b

assert(se.x() == 3)

var adds = \t, v ->
	return (t[1] or 1) + v

se[1] = 10

-- make sure normal function taking self still works
se.adder = \@, val ->
	var a = adds(self, val)
	return a

assert(se.adder(se, 10) == 20)
assert(se.adder(@, 10) == 20)
assert(se.adder({3}, 10) == 13)

-- reverse self and @
se.adder2 = \self, val ->
	var a = adds(@, val)
	return a

assert(se.adder2(se, 10) == 20)
assert(se.adder2(@, 10) == 20)
assert(se.adder2({3}, 10) == 13)


-- string method
assert(("hi").rep(@, 3) == "hihihi")
assert(("hi").rep("Hello! ", 3) == "Hello! Hello! Hello! ")


-- objects
var met = \@, k-> return k * self.value

var obj = { value = 3, met = met }
assert(obj.met(@, 2) == 6)


var foo = \@, k-> return k * @.value

var create = \x-> return { value = x, foo = foo }

print(create(3.141592).foo(@, 2))


var inline = { value = 3.141592, foo = \@, i-> return i*@.value }
print(inline.foo(@, 2))


var mul = \x, y ->
	return x * y

var @ = { a = 7, b = 3 }
@.any = \self ->
	return mul(@.a, @.b)
assert(@.any(@) == 21)

var ani = \self ->
	return mul(self.a, @.b)

assert(ani(@) == 21)

var ann = \self ->
	return mul(@['a'], @["b"])

assert(ann(@) == 21)


-- @ should just work

var t = {num = 10}
t['h-a'] = \@, n ->
	return @.num + n

assert(t['h-a'](@, 40) == 50)

var i = 0
var ret_t = ->
	i = i + 1
	return t
print(ret_t()['h-a'](@, 10) == 20)
assert(i == 1)


-- self and @ is interchangeable

var boo = { value = 7, compute= \self, i-> return self.value*i+1 }
print(boo.compute(@, 3) + boo.compute(@, 7))


-- @ is normal identifier
var @ = 8

-- deep table
var lvl
lvl = {
	a = {
		bb = {
			'long-c' = {
				\@, x ->
					return @.val + x
				, val = 13
			}
		}
		, cc = {
			fn = \@, x ->
				return @.val * x
			, val = 3
		}
		, dd = ->
			return \@, x ->
				return @.val / x
		
		, ee = ->
			return lvl.a.cc
		-- unused
		, val = 7
	}
}

assert(lvl.a.bb['long-c'][1](@, 5) == 18)
assert(lvl.a.cc.fn(@, 4) == 12)
assert(lvl.a.ee().fn(@, 5) == 15)

-- these shd not convert to `:` method call
@ = { val = 6 }
assert((lvl['a'].cc.fn)(@, 4) == 24)
assert(lvl.a.dd()(@, 2) == 3)



-- substitute val works
var oth = { val = 7 }
assert(lvl.a.cc.fn(oth, 4) == 28)
