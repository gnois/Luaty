var tree = :?
	empty
	node: l, x, r

var e = tree.empty()
var n = tree.node

var top = n(n(n(e, 3, e), 4, e), 5, n(e, 2, e))

var depth
depth = \t ->
	return tree:t?
		else return 0
		node: l, _, r -> return 1 + math.max(depth(l), depth(r))

assert(depth(top) == 3)


-- messy
var tbl = {
	dum = 9,
	adt = :?
		-- g is some ctor
		g
		
	--`some long comments`
				-- comment
		h: i, j, k
		l: ...

		m: n, o
	, my = 'helo'
}


var adt = tbl.adt
	
var g = adt.g()
var h = adt.h(1, 2, 3)
var m = adt.m('a', 'b')

var show = \e ->
	-- `adt` is needed to compile check if all cases are listed ... later
	print(adt:e?
		g return "G"
		h: i, j, k -> return i, j, k
		else: ... ->
			return 'fallback', ...
	)

show(g)
show(h)
show(m)
show()
show(tbl)


var any, some = :? any: ...;, \s -> return s

var a = any(1, 2, 3)
print(any:a? _: ... -> return ...)
assert(some(6) == 6)
	
